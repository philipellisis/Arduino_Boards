
Caterina.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00007eae  00000f42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eae  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008001b4  008001b4  00000ff6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004eeb  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018cd  00000000  00000000  0000617b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d70  00000000  00000000  00007a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000076c  00000000  00000000  0000a7b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000208d  00000000  00000000  0000af24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f09  00000000  00000000  0000cfb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000feba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	5f c0       	rjmp	.+190    	; 0x70c0 <__ctors_end>
    7002:	00 00       	nop
    7004:	78 c0       	rjmp	.+240    	; 0x70f6 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	76 c0       	rjmp	.+236    	; 0x70f6 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	74 c0       	rjmp	.+232    	; 0x70f6 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	72 c0       	rjmp	.+228    	; 0x70f6 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	70 c0       	rjmp	.+224    	; 0x70f6 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	6e c0       	rjmp	.+220    	; 0x70f6 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	6c c0       	rjmp	.+216    	; 0x70f6 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	6a c0       	rjmp	.+212    	; 0x70f6 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	68 c0       	rjmp	.+208    	; 0x70f6 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	cd c4       	rjmp	.+2458   	; 0x79c4 <__vector_10>
    702a:	00 00       	nop
    702c:	64 c0       	rjmp	.+200    	; 0x70f6 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	62 c0       	rjmp	.+196    	; 0x70f6 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	60 c0       	rjmp	.+192    	; 0x70f6 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	5e c0       	rjmp	.+188    	; 0x70f6 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	5c c0       	rjmp	.+184    	; 0x70f6 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	5a c0       	rjmp	.+180    	; 0x70f6 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	e9 c0       	rjmp	.+466    	; 0x7218 <__vector_17>
    7046:	00 00       	nop
    7048:	56 c0       	rjmp	.+172    	; 0x70f6 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	54 c0       	rjmp	.+168    	; 0x70f6 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	52 c0       	rjmp	.+164    	; 0x70f6 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	50 c0       	rjmp	.+160    	; 0x70f6 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	4e c0       	rjmp	.+156    	; 0x70f6 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	4c c0       	rjmp	.+152    	; 0x70f6 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	4a c0       	rjmp	.+148    	; 0x70f6 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	48 c0       	rjmp	.+144    	; 0x70f6 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	46 c0       	rjmp	.+140    	; 0x70f6 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	44 c0       	rjmp	.+136    	; 0x70f6 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	42 c0       	rjmp	.+132    	; 0x70f6 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	40 c0       	rjmp	.+128    	; 0x70f6 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	3e c0       	rjmp	.+124    	; 0x70f6 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	3c c0       	rjmp	.+120    	; 0x70f6 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	3a c0       	rjmp	.+116    	; 0x70f6 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	38 c0       	rjmp	.+112    	; 0x70f6 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	36 c0       	rjmp	.+108    	; 0x70f6 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	34 c0       	rjmp	.+104    	; 0x70f6 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	32 c0       	rjmp	.+100    	; 0x70f6 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	30 c0       	rjmp	.+96     	; 0x70f6 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	2e c0       	rjmp	.+92     	; 0x70f6 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	2c c0       	rjmp	.+88     	; 0x70f6 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	2a c0       	rjmp	.+84     	; 0x70f6 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	28 c0       	rjmp	.+80     	; 0x70f6 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	26 c0       	rjmp	.+76     	; 0x70f6 <__bad_interrupt>
    70aa:	00 00       	nop
    70ac:	4d 3e       	cpi	r20, 0xED	; 237
    70ae:	66 3e       	cpi	r22, 0xE6	; 230
    70b0:	12 3f       	cpi	r17, 0xF2	; 242
    70b2:	66 3e       	cpi	r22, 0xE6	; 230
    70b4:	12 3f       	cpi	r17, 0xF2	; 242
    70b6:	9e 3e       	cpi	r25, 0xEE	; 238
    70b8:	c0 3e       	cpi	r28, 0xE0	; 224
    70ba:	12 3f       	cpi	r17, 0xF2	; 242
    70bc:	e0 3e       	cpi	r30, 0xE0	; 224
    70be:	f2 3e       	cpi	r31, 0xE2	; 226

000070c0 <__ctors_end>:
    70c0:	11 24       	eor	r1, r1
    70c2:	1f be       	out	0x3f, r1	; 63
    70c4:	cf ef       	ldi	r28, 0xFF	; 255
    70c6:	da e0       	ldi	r29, 0x0A	; 10
    70c8:	de bf       	out	0x3e, r29	; 62
    70ca:	cd bf       	out	0x3d, r28	; 61

000070cc <__do_copy_data>:
    70cc:	11 e0       	ldi	r17, 0x01	; 1
    70ce:	a0 e0       	ldi	r26, 0x00	; 0
    70d0:	b1 e0       	ldi	r27, 0x01	; 1
    70d2:	ee ea       	ldi	r30, 0xAE	; 174
    70d4:	fe e7       	ldi	r31, 0x7E	; 126
    70d6:	02 c0       	rjmp	.+4      	; 0x70dc <__do_copy_data+0x10>
    70d8:	05 90       	lpm	r0, Z+
    70da:	0d 92       	st	X+, r0
    70dc:	a4 3b       	cpi	r26, 0xB4	; 180
    70de:	b1 07       	cpc	r27, r17
    70e0:	d9 f7       	brne	.-10     	; 0x70d8 <__do_copy_data+0xc>

000070e2 <__do_clear_bss>:
    70e2:	21 e0       	ldi	r18, 0x01	; 1
    70e4:	a4 eb       	ldi	r26, 0xB4	; 180
    70e6:	b1 e0       	ldi	r27, 0x01	; 1
    70e8:	01 c0       	rjmp	.+2      	; 0x70ec <.do_clear_bss_start>

000070ea <.do_clear_bss_loop>:
    70ea:	1d 92       	st	X+, r1

000070ec <.do_clear_bss_start>:
    70ec:	aa 3c       	cpi	r26, 0xCA	; 202
    70ee:	b2 07       	cpc	r27, r18
    70f0:	e1 f7       	brne	.-8      	; 0x70ea <.do_clear_bss_loop>
    70f2:	62 d3       	rcall	.+1732   	; 0x77b8 <main>
    70f4:	da c6       	rjmp	.+3508   	; 0x7eaa <_exit>

000070f6 <__bad_interrupt>:
    70f6:	84 cf       	rjmp	.-248    	; 0x7000 <__vectors>

000070f8 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    70f8:	84 e0       	ldi	r24, 0x04	; 4
    70fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    70fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    7102:	85 fd       	sbrc	r24, 5
    7104:	0d c0       	rjmp	.+26     	; 0x7120 <FetchNextCommandByte+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7106:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    710a:	8b 77       	andi	r24, 0x7B	; 123
    710c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7110:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    7114:	82 fd       	sbrc	r24, 2
    7116:	f3 cf       	rjmp	.-26     	; 0x70fe <FetchNextCommandByte+0x6>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7118:	8e b3       	in	r24, 0x1e	; 30
    711a:	81 11       	cpse	r24, r1
    711c:	f9 cf       	rjmp	.-14     	; 0x7110 <FetchNextCommandByte+0x18>
    711e:	02 c0       	rjmp	.+4      	; 0x7124 <FetchNextCommandByte+0x2c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7120:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    7124:	08 95       	ret

00007126 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7126:	93 e0       	ldi	r25, 0x03	; 3
    7128:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    712c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    7130:	95 ff       	sbrs	r25, 5
    7132:	0a c0       	rjmp	.+20     	; 0x7148 <WriteNextResponseByte+0x22>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7134:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	}

	/* Write the next byte to the IN endpoint */
	Endpoint_Write_8(Response);
	
	TX_LED_ON();
    7138:	5d 98       	cbi	0x0b, 5	; 11
	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    713a:	84 e6       	ldi	r24, 0x64	; 100
    713c:	90 e0       	ldi	r25, 0x00	; 0
    713e:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <TxLEDPulse+0x1>
    7142:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <TxLEDPulse>
    7146:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7148:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    714c:	9e 77       	andi	r25, 0x7E	; 126
    714e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7152:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    7156:	90 fd       	sbrc	r25, 0
    7158:	ed cf       	rjmp	.-38     	; 0x7134 <WriteNextResponseByte+0xe>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    715a:	9e b3       	in	r25, 0x1e	; 30
    715c:	91 11       	cpse	r25, r1
    715e:	f9 cf       	rjmp	.-14     	; 0x7152 <WriteNextResponseByte+0x2c>
    7160:	08 95       	ret

00007162 <StartSketch>:
uint16_t bootKey = 0x7777;
volatile uint16_t *const bootKeyPtr = (volatile uint16_t *)0x0800;

void StartSketch(void)
{
	cli();
    7162:	f8 94       	cli
	
	/* Undo TIMER1 setup and clear the count before running the sketch */
	TIMSK1 = 0;
    7164:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B = 0;
    7168:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
    716c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	TCNT1L = 0;
    7170:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	/* Relocate the interrupt vector table to the application section */
	MCUCR = (1 << IVCE);
    7174:	81 e0       	ldi	r24, 0x01	; 1
    7176:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
    7178:	15 be       	out	0x35, r1	; 53

	L_LED_OFF();
    717a:	47 98       	cbi	0x08, 7	; 8
	TX_LED_OFF();
    717c:	5d 9a       	sbi	0x0b, 5	; 11
	RX_LED_OFF();
    717e:	28 9a       	sbi	0x05, 0	; 5

	/* jump to beginning of application space */
	__asm__ volatile("jmp 0x0000");
    7180:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    7184:	08 95       	ret

00007186 <LEDPulse>:

/*	Breathing animation on L LED indicates bootloader is running */
uint16_t LLEDPulse;
void LEDPulse(void)
{
	LLEDPulse++;
    7186:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <LLEDPulse>
    718a:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <LLEDPulse+0x1>
    718e:	2f 5f       	subi	r18, 0xFF	; 255
    7190:	3f 4f       	sbci	r19, 0xFF	; 255
    7192:	30 93 bf 01 	sts	0x01BF, r19	; 0x8001bf <LLEDPulse+0x1>
    7196:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <LLEDPulse>
	uint8_t p = LLEDPulse >> 8;
    719a:	83 2f       	mov	r24, r19
	if (p > 127)
    719c:	37 ff       	sbrs	r19, 7
    719e:	02 c0       	rjmp	.+4      	; 0x71a4 <LEDPulse+0x1e>
		p = 254-p;
    71a0:	8e ef       	ldi	r24, 0xFE	; 254
    71a2:	83 1b       	sub	r24, r19
	p += p;
	if (((uint8_t)LLEDPulse) > p)
    71a4:	33 27       	eor	r19, r19
    71a6:	88 0f       	add	r24, r24
    71a8:	90 e0       	ldi	r25, 0x00	; 0
    71aa:	82 17       	cp	r24, r18
    71ac:	93 07       	cpc	r25, r19
    71ae:	14 f4       	brge	.+4      	; 0x71b4 <LEDPulse+0x2e>
		L_LED_OFF();
    71b0:	47 98       	cbi	0x08, 7	; 8
    71b2:	08 95       	ret
	else
		L_LED_ON();
    71b4:	47 9a       	sbi	0x08, 7	; 8
    71b6:	08 95       	ret

000071b8 <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    71b8:	84 b7       	in	r24, 0x34	; 52
    71ba:	87 7f       	andi	r24, 0xF7	; 247
    71bc:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    71be:	0f b6       	in	r0, 0x3f	; 63
    71c0:	f8 94       	cli
    71c2:	a8 95       	wdr
    71c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    71c8:	88 61       	ori	r24, 0x18	; 24
    71ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    71ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    71d2:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    71d4:	90 e8       	ldi	r25, 0x80	; 128
    71d6:	80 e0       	ldi	r24, 0x00	; 0
    71d8:	0f b6       	in	r0, 0x3f	; 63
    71da:	f8 94       	cli
    71dc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    71e0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    71e4:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    71e6:	81 e0       	ldi	r24, 0x01	; 1
    71e8:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    71ea:	82 e0       	ldi	r24, 0x02	; 2
    71ec:	85 bf       	out	0x35, r24	; 53
	
	LED_SETUP();
    71ee:	3f 9a       	sbi	0x07, 7	; 7
    71f0:	20 9a       	sbi	0x04, 0	; 4
    71f2:	55 9a       	sbi	0x0a, 5	; 10
	CPU_PRESCALE(0); 
    71f4:	e1 e6       	ldi	r30, 0x61	; 97
    71f6:	f0 e0       	ldi	r31, 0x00	; 0
    71f8:	90 83       	st	Z, r25
    71fa:	10 82       	st	Z, r1
	L_LED_OFF();
    71fc:	47 98       	cbi	0x08, 7	; 8
	TX_LED_OFF();
    71fe:	5d 9a       	sbi	0x0b, 5	; 11
	RX_LED_OFF();
    7200:	28 9a       	sbi	0x05, 0	; 5
	 * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
	 * Our chosen compare match generates an interrupt every 1 ms.
	 * This interrupt is disabled selectively when doing memory reading, erasing,
	 * or writing since SPM has tight timing requirements.
	 */ 
	OCR1AH = 0;
    7202:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
	OCR1AL = 250;
    7206:	9a ef       	ldi	r25, 0xFA	; 250
    7208:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    720c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    7210:	83 e0       	ldi	r24, 0x03	; 3
    7212:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	/* Initialize USB Subsystem */
	USB_Init();
    7216:	be c3       	rjmp	.+1916   	; 0x7994 <USB_Init>

00007218 <__vector_17>:
}

//uint16_t ctr = 0;
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    7218:	1f 92       	push	r1
    721a:	0f 92       	push	r0
    721c:	0f b6       	in	r0, 0x3f	; 63
    721e:	0f 92       	push	r0
    7220:	11 24       	eor	r1, r1
    7222:	2f 93       	push	r18
    7224:	8f 93       	push	r24
    7226:	9f 93       	push	r25
    7228:	ef 93       	push	r30
    722a:	ff 93       	push	r31
	/* Reset counter */
	TCNT1H = 0;
    722c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	TCNT1L = 0;
    7230:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

	/* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
	if (TxLEDPulse && !(--TxLEDPulse))
    7234:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <TxLEDPulse>
    7238:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <TxLEDPulse+0x1>
    723c:	00 97       	sbiw	r24, 0x00	; 0
    723e:	41 f0       	breq	.+16     	; 0x7250 <__vector_17+0x38>
    7240:	01 97       	sbiw	r24, 0x01	; 1
    7242:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <TxLEDPulse+0x1>
    7246:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <TxLEDPulse>
    724a:	89 2b       	or	r24, r25
    724c:	09 f4       	brne	.+2      	; 0x7250 <__vector_17+0x38>
		TX_LED_OFF();
    724e:	5d 9a       	sbi	0x0b, 5	; 11
	if (RxLEDPulse && !(--RxLEDPulse))
    7250:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <RxLEDPulse>
    7254:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <RxLEDPulse+0x1>
    7258:	00 97       	sbiw	r24, 0x00	; 0
    725a:	41 f0       	breq	.+16     	; 0x726c <__vector_17+0x54>
    725c:	01 97       	sbiw	r24, 0x01	; 1
    725e:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <RxLEDPulse+0x1>
    7262:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <RxLEDPulse>
    7266:	89 2b       	or	r24, r25
    7268:	09 f4       	brne	.+2      	; 0x726c <__vector_17+0x54>
		RX_LED_OFF();
    726a:	28 9a       	sbi	0x05, 0	; 5
	
	if (pgm_read_word(0) != 0xFFFF)
    726c:	e0 e0       	ldi	r30, 0x00	; 0
    726e:	f0 e0       	ldi	r31, 0x00	; 0
    7270:	85 91       	lpm	r24, Z+
    7272:	94 91       	lpm	r25, Z
    7274:	01 96       	adiw	r24, 0x01	; 1
    7276:	49 f0       	breq	.+18     	; 0x728a <__vector_17+0x72>
		Timeout++;
    7278:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
    727c:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <__data_end+0x1>
    7280:	01 96       	adiw	r24, 0x01	; 1
    7282:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <__data_end+0x1>
    7286:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
}
    728a:	ff 91       	pop	r31
    728c:	ef 91       	pop	r30
    728e:	9f 91       	pop	r25
    7290:	8f 91       	pop	r24
    7292:	2f 91       	pop	r18
    7294:	0f 90       	pop	r0
    7296:	0f be       	out	0x3f, r0	; 63
    7298:	0f 90       	pop	r0
    729a:	1f 90       	pop	r1
    729c:	18 95       	reti

0000729e <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    729e:	42 e0       	ldi	r20, 0x02	; 2
    72a0:	61 ec       	ldi	r22, 0xC1	; 193
    72a2:	82 e0       	ldi	r24, 0x02	; 2
    72a4:	0c d3       	rcall	.+1560   	; 0x78be <Endpoint_ConfigureEndpoint_Prv>
    72a6:	42 e1       	ldi	r20, 0x12	; 18
    72a8:	61 e8       	ldi	r22, 0x81	; 129
    72aa:	83 e0       	ldi	r24, 0x03	; 3
    72ac:	08 d3       	rcall	.+1552   	; 0x78be <Endpoint_ConfigureEndpoint_Prv>
    72ae:	42 e1       	ldi	r20, 0x12	; 18
    72b0:	60 e8       	ldi	r22, 0x80	; 128
    72b2:	84 e0       	ldi	r24, 0x04	; 4
    72b4:	04 c3       	rjmp	.+1544   	; 0x78be <Endpoint_ConfigureEndpoint_Prv>

000072b6 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    72b6:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <USB_ControlRequest>
    72ba:	98 2f       	mov	r25, r24
    72bc:	9f 77       	andi	r25, 0x7F	; 127
    72be:	91 32       	cpi	r25, 0x21	; 33
    72c0:	39 f5       	brne	.+78     	; 0x7310 <EVENT_USB_Device_ControlRequest+0x5a>
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    72c2:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <USB_ControlRequest+0x1>
    72c6:	90 32       	cpi	r25, 0x20	; 32
    72c8:	91 f0       	breq	.+36     	; 0x72ee <EVENT_USB_Device_ControlRequest+0x38>
    72ca:	91 32       	cpi	r25, 0x21	; 33
    72cc:	09 f5       	brne	.+66     	; 0x7310 <EVENT_USB_Device_ControlRequest+0x5a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    72ce:	81 3a       	cpi	r24, 0xA1	; 161
    72d0:	f9 f4       	brne	.+62     	; 0x7310 <EVENT_USB_Device_ControlRequest+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    72d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    72d6:	87 7f       	andi	r24, 0xF7	; 247
    72d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    72dc:	67 e0       	ldi	r22, 0x07	; 7
    72de:	70 e0       	ldi	r23, 0x00	; 0
    72e0:	83 e0       	ldi	r24, 0x03	; 3
    72e2:	91 e0       	ldi	r25, 0x01	; 1
    72e4:	20 d4       	rcall	.+2112   	; 0x7b26 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    72e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    72ea:	8b 77       	andi	r24, 0x7B	; 123
    72ec:	0f c0       	rjmp	.+30     	; 0x730c <EVENT_USB_Device_ControlRequest+0x56>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    72ee:	81 32       	cpi	r24, 0x21	; 33
    72f0:	79 f4       	brne	.+30     	; 0x7310 <EVENT_USB_Device_ControlRequest+0x5a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    72f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    72f6:	87 7f       	andi	r24, 0xF7	; 247
    72f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    72fc:	67 e0       	ldi	r22, 0x07	; 7
    72fe:	70 e0       	ldi	r23, 0x00	; 0
    7300:	83 e0       	ldi	r24, 0x03	; 3
    7302:	91 e0       	ldi	r25, 0x01	; 1
    7304:	68 d4       	rcall	.+2256   	; 0x7bd6 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7306:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    730a:	8e 77       	andi	r24, 0x7E	; 126
    730c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7310:	08 95       	ret

00007312 <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    7312:	4f 92       	push	r4
    7314:	5f 92       	push	r5
    7316:	6f 92       	push	r6
    7318:	7f 92       	push	r7
    731a:	8f 92       	push	r8
    731c:	9f 92       	push	r9
    731e:	af 92       	push	r10
    7320:	bf 92       	push	r11
    7322:	cf 92       	push	r12
    7324:	df 92       	push	r13
    7326:	ef 92       	push	r14
    7328:	ff 92       	push	r15
    732a:	0f 93       	push	r16
    732c:	1f 93       	push	r17
    732e:	cf 93       	push	r28
    7330:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7332:	84 e0       	ldi	r24, 0x04	; 4
    7334:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7338:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    733c:	82 ff       	sbrs	r24, 2
    733e:	2b c2       	rjmp	.+1110   	; 0x7796 <CDC_Task+0x484>
	  return;
	  
	RX_LED_ON();
    7340:	28 98       	cbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    7342:	84 e6       	ldi	r24, 0x64	; 100
    7344:	90 e0       	ldi	r25, 0x00	; 0
    7346:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <RxLEDPulse+0x1>
    734a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <RxLEDPulse>

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    734e:	d4 de       	rcall	.-600    	; 0x70f8 <FetchNextCommandByte>
    7350:	c8 2f       	mov	r28, r24

	if (Command == 'E')
    7352:	85 34       	cpi	r24, 0x45	; 69
    7354:	81 f4       	brne	.+32     	; 0x7376 <CDC_Task+0x64>
	{
		/* We nearly run out the bootloader timeout clock, 
		* leaving just a few hundred milliseconds so the 
		* bootloder has time to respond and service any 
		* subsequent requests */
		Timeout = TIMEOUT_PERIOD - 500;
    7356:	8c e4       	ldi	r24, 0x4C	; 76
    7358:	9d e1       	ldi	r25, 0x1D	; 29
    735a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <__data_end+0x1>
    735e:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
	
		/* Re-enable RWW section - must be done here in case 
		 * user has disabled verification on upload.  */
		boot_rww_enable_safe();		
    7362:	07 b6       	in	r0, 0x37	; 55
    7364:	00 fc       	sbrc	r0, 0
    7366:	fd cf       	rjmp	.-6      	; 0x7362 <CDC_Task+0x50>
    7368:	f9 99       	sbic	0x1f, 1	; 31
    736a:	fe cf       	rjmp	.-4      	; 0x7368 <CDC_Task+0x56>
    736c:	81 e1       	ldi	r24, 0x11	; 17
    736e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7372:	e8 95       	spm
    7374:	03 c0       	rjmp	.+6      	; 0x737c <CDC_Task+0x6a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
    7376:	84 35       	cpi	r24, 0x54	; 84
	{
		FetchNextCommandByte();
    7378:	21 f4       	brne	.+8      	; 0x7382 <CDC_Task+0x70>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    737a:	be de       	rcall	.-644    	; 0x70f8 <FetchNextCommandByte>
    737c:	8d e0       	ldi	r24, 0x0D	; 13
    737e:	d3 de       	rcall	.-602    	; 0x7126 <WriteNextResponseByte>
    7380:	e1 c1       	rjmp	.+962    	; 0x7744 <CDC_Task+0x432>
	}
	else if ((Command == 'L') || (Command == 'P'))
    7382:	8c 34       	cpi	r24, 0x4C	; 76
    7384:	d9 f3       	breq	.-10     	; 0x737c <CDC_Task+0x6a>
    7386:	80 35       	cpi	r24, 0x50	; 80
    7388:	c9 f3       	breq	.-14     	; 0x737c <CDC_Task+0x6a>
	{
		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
    738a:	84 37       	cpi	r24, 0x74	; 116
	{
		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
		WriteNextResponseByte(0x44);
    738c:	21 f4       	brne	.+8      	; 0x7396 <CDC_Task+0x84>
    738e:	84 e4       	ldi	r24, 0x44	; 68
    7390:	ca de       	rcall	.-620    	; 0x7126 <WriteNextResponseByte>
		WriteNextResponseByte(0x00);
    7392:	80 e0       	ldi	r24, 0x00	; 0
    7394:	f4 cf       	rjmp	.-24     	; 0x737e <CDC_Task+0x6c>
	}
	else if (Command == 'a')
    7396:	81 36       	cpi	r24, 0x61	; 97
    7398:	11 f4       	brne	.+4      	; 0x739e <CDC_Task+0x8c>
	{
		// Indicate auto-address increment is supported 
		WriteNextResponseByte('Y');
    739a:	89 e5       	ldi	r24, 0x59	; 89
	}
	else if (Command == 'A')
    739c:	f0 cf       	rjmp	.-32     	; 0x737e <CDC_Task+0x6c>
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    739e:	81 34       	cpi	r24, 0x41	; 65
    73a0:	91 f4       	brne	.+36     	; 0x73c6 <CDC_Task+0xb4>
    73a2:	aa de       	rcall	.-684    	; 0x70f8 <FetchNextCommandByte>
		CurrAddress  |= (FetchNextCommandByte() << 1);
    73a4:	c8 2f       	mov	r28, r24
    73a6:	a8 de       	rcall	.-688    	; 0x70f8 <FetchNextCommandByte>
    73a8:	2c 2f       	mov	r18, r28
    73aa:	30 e0       	ldi	r19, 0x00	; 0
    73ac:	32 2f       	mov	r19, r18
    73ae:	22 27       	eor	r18, r18
    73b0:	33 0f       	add	r19, r19
    73b2:	90 e0       	ldi	r25, 0x00	; 0
    73b4:	88 0f       	add	r24, r24
    73b6:	99 1f       	adc	r25, r25
    73b8:	82 2b       	or	r24, r18
    73ba:	93 2b       	or	r25, r19
    73bc:	09 2e       	mov	r0, r25
    73be:	00 0c       	add	r0, r0
    73c0:	aa 0b       	sbc	r26, r26
    73c2:	bb 0b       	sbc	r27, r27
    73c4:	93 c1       	rjmp	.+806    	; 0x76ec <CDC_Task+0x3da>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
    73c6:	80 37       	cpi	r24, 0x70	; 112
    73c8:	11 f4       	brne	.+4      	; 0x73ce <CDC_Task+0xbc>
	{
		// Indicate serial programmer back to the host 
		WriteNextResponseByte('S');
    73ca:	83 e5       	ldi	r24, 0x53	; 83
	}
	else if (Command == 'S')
    73cc:	d8 cf       	rjmp	.-80     	; 0x737e <CDC_Task+0x6c>
    73ce:	83 35       	cpi	r24, 0x53	; 83
    73d0:	49 f4       	brne	.+18     	; 0x73e4 <CDC_Task+0xd2>
    73d2:	ca ea       	ldi	r28, 0xAA	; 170
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    73d4:	d1 e0       	ldi	r29, 0x01	; 1
    73d6:	89 91       	ld	r24, Y+
    73d8:	a6 de       	rcall	.-692    	; 0x7126 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    73da:	21 e0       	ldi	r18, 0x01	; 1
    73dc:	c1 3b       	cpi	r28, 0xB1	; 177
    73de:	d2 07       	cpc	r29, r18
    73e0:	d1 f7       	brne	.-12     	; 0x73d6 <CDC_Task+0xc4>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
    73e2:	b0 c1       	rjmp	.+864    	; 0x7744 <CDC_Task+0x432>
    73e4:	86 35       	cpi	r24, 0x56	; 86
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    73e6:	21 f4       	brne	.+8      	; 0x73f0 <CDC_Task+0xde>
    73e8:	81 e3       	ldi	r24, 0x31	; 49
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    73ea:	9d de       	rcall	.-710    	; 0x7126 <WriteNextResponseByte>
    73ec:	80 e3       	ldi	r24, 0x30	; 48
	}
	else if (Command == 's')
    73ee:	c7 cf       	rjmp	.-114    	; 0x737e <CDC_Task+0x6c>
    73f0:	83 37       	cpi	r24, 0x73	; 115
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    73f2:	31 f4       	brne	.+12     	; 0x7400 <CDC_Task+0xee>
    73f4:	87 e8       	ldi	r24, 0x87	; 135
    73f6:	97 de       	rcall	.-722    	; 0x7126 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_2);
    73f8:	85 e9       	ldi	r24, 0x95	; 149
    73fa:	95 de       	rcall	.-726    	; 0x7126 <WriteNextResponseByte>
    73fc:	8e e1       	ldi	r24, 0x1E	; 30
		WriteNextResponseByte(AVR_SIGNATURE_1);
    73fe:	bf cf       	rjmp	.-130    	; 0x737e <CDC_Task+0x6c>
    7400:	85 36       	cpi	r24, 0x65	; 101
	}
	else if (Command == 'e')
    7402:	b9 f4       	brne	.+46     	; 0x7432 <CDC_Task+0x120>
    7404:	e0 e0       	ldi	r30, 0x00	; 0
    7406:	f0 e0       	ldi	r31, 0x00	; 0
    7408:	83 e0       	ldi	r24, 0x03	; 3
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    740a:	95 e0       	ldi	r25, 0x05	; 5
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
    740c:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    7410:	e8 95       	spm
    7412:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
    7414:	00 fc       	sbrc	r0, 0
    7416:	fd cf       	rjmp	.-6      	; 0x7412 <CDC_Task+0x100>
    7418:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
			boot_page_write(CurrFlashAddress);
    741c:	e8 95       	spm
    741e:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
    7420:	00 fc       	sbrc	r0, 0
    7422:	fd cf       	rjmp	.-6      	; 0x741e <CDC_Task+0x10c>
    7424:	e0 58       	subi	r30, 0x80	; 128
    7426:	ff 4f       	sbci	r31, 0xFF	; 255
    7428:	e1 15       	cp	r30, r1
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    742a:	40 e7       	ldi	r20, 0x70	; 112
    742c:	f4 07       	cpc	r31, r20
    742e:	71 f7       	brne	.-36     	; 0x740c <CDC_Task+0xfa>
    7430:	a5 cf       	rjmp	.-182    	; 0x737c <CDC_Task+0x6a>
    7432:	82 37       	cpi	r24, 0x72	; 114

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
    7434:	19 f4       	brne	.+6      	; 0x743c <CDC_Task+0x12a>
    7436:	e1 e0       	ldi	r30, 0x01	; 1
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    7438:	f0 e0       	ldi	r31, 0x00	; 0
    743a:	0e c0       	rjmp	.+28     	; 0x7458 <CDC_Task+0x146>
    743c:	86 34       	cpi	r24, 0x46	; 70
	}
	else if (Command == 'F')
    743e:	19 f4       	brne	.+6      	; 0x7446 <CDC_Task+0x134>
    7440:	e0 e0       	ldi	r30, 0x00	; 0
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    7442:	f0 e0       	ldi	r31, 0x00	; 0
    7444:	09 c0       	rjmp	.+18     	; 0x7458 <CDC_Task+0x146>
    7446:	8e 34       	cpi	r24, 0x4E	; 78
	}
	else if (Command == 'N')
    7448:	19 f4       	brne	.+6      	; 0x7450 <CDC_Task+0x13e>
    744a:	e3 e0       	ldi	r30, 0x03	; 3
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    744c:	f0 e0       	ldi	r31, 0x00	; 0
    744e:	04 c0       	rjmp	.+8      	; 0x7458 <CDC_Task+0x146>
    7450:	81 35       	cpi	r24, 0x51	; 81
	}
	else if (Command == 'Q')
    7452:	39 f4       	brne	.+14     	; 0x7462 <CDC_Task+0x150>
    7454:	e2 e0       	ldi	r30, 0x02	; 2
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    7456:	f0 e0       	ldi	r31, 0x00	; 0
    7458:	89 e0       	ldi	r24, 0x09	; 9
    745a:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    745e:	84 91       	lpm	r24, Z
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
    7460:	8e cf       	rjmp	.-228    	; 0x737e <CDC_Task+0x6c>
    7462:	82 36       	cpi	r24, 0x62	; 98
	{
		WriteNextResponseByte('Y');
    7464:	31 f4       	brne	.+12     	; 0x7472 <CDC_Task+0x160>
    7466:	89 e5       	ldi	r24, 0x59	; 89
    7468:	5e de       	rcall	.-836    	; 0x7126 <WriteNextResponseByte>

		// Send block size to the host 
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    746a:	80 e0       	ldi	r24, 0x00	; 0
    746c:	5c de       	rcall	.-840    	; 0x7126 <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    746e:	80 e8       	ldi	r24, 0x80	; 128
	}
	else if ((Command == 'B') || (Command == 'g'))
    7470:	86 cf       	rjmp	.-244    	; 0x737e <CDC_Task+0x6c>
    7472:	82 34       	cpi	r24, 0x42	; 66
    7474:	19 f0       	breq	.+6      	; 0x747c <CDC_Task+0x16a>
    7476:	87 36       	cpi	r24, 0x67	; 103
	{
		// Keep resetting the timeout counter if we're receiving self-programming instructions
		Timeout = 0;
    7478:	09 f0       	breq	.+2      	; 0x747c <CDC_Task+0x16a>
    747a:	d0 c0       	rjmp	.+416    	; 0x761c <CDC_Task+0x30a>
    747c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <__data_end+0x1>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    7480:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <__data_end>
    7484:	39 de       	rcall	.-910    	; 0x70f8 <FetchNextCommandByte>
	BlockSize |=  FetchNextCommandByte();
    7486:	08 2f       	mov	r16, r24
    7488:	37 de       	rcall	.-914    	; 0x70f8 <FetchNextCommandByte>
    748a:	d8 2f       	mov	r29, r24

	MemoryType =  FetchNextCommandByte();
    748c:	35 de       	rcall	.-918    	; 0x70f8 <FetchNextCommandByte>
    748e:	18 2f       	mov	r17, r24
    7490:	8b eb       	ldi	r24, 0xBB	; 187

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    7492:	81 0f       	add	r24, r17
    7494:	82 30       	cpi	r24, 0x02	; 2
    7496:	10 f0       	brcs	.+4      	; 0x749c <CDC_Task+0x18a>
    7498:	8f e3       	ldi	r24, 0x3F	; 63
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
    749a:	71 cf       	rjmp	.-286    	; 0x737e <CDC_Task+0x6c>
    749c:	8d 2f       	mov	r24, r29
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    749e:	90 e0       	ldi	r25, 0x00	; 0
    74a0:	90 2b       	or	r25, r16
	BlockSize |=  FetchNextCommandByte();
    74a2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		return;
	}

	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
	 * while doing SPM tasks */
	TIMSK1 = 0;
    74a6:	c7 36       	cpi	r28, 0x67	; 103

	/* Check if command is to read memory */
	if (Command == 'g')
    74a8:	09 f0       	breq	.+2      	; 0x74ac <CDC_Task+0x19a>
    74aa:	42 c0       	rjmp	.+132    	; 0x7530 <CDC_Task+0x21e>
    74ac:	21 e1       	ldi	r18, 0x11	; 17
	{		
		/* Re-enable RWW section */
		boot_rww_enable();
    74ae:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    74b2:	e8 95       	spm
    74b4:	ec 01       	movw	r28, r24
    74b6:	b1 2c       	mov	r11, r1
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    74b8:	01 e0       	ldi	r16, 0x01	; 1

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
    74ba:	20 97       	sbiw	r28, 0x00	; 0
	if (Command == 'g')
	{		
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    74bc:	09 f4       	brne	.+2      	; 0x74c0 <CDC_Task+0x1ae>
    74be:	aa c0       	rjmp	.+340    	; 0x7614 <CDC_Task+0x302>
    74c0:	c0 90 ba 01 	lds	r12, 0x01BA	; 0x8001ba <CurrAddress>
    74c4:	d0 90 bb 01 	lds	r13, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    74c8:	e0 90 bc 01 	lds	r14, 0x01BC	; 0x8001bc <CurrAddress+0x2>
    74cc:	f0 90 bd 01 	lds	r15, 0x01BD	; 0x8001bd <CurrAddress+0x3>
		{
			if (MemoryType == 'F')
    74d0:	16 34       	cpi	r17, 0x46	; 70
    74d2:	b9 f4       	brne	.+46     	; 0x7502 <CDC_Task+0x1f0>
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    74d4:	eb 2d       	mov	r30, r11
    74d6:	f0 e0       	ldi	r31, 0x00	; 0
    74d8:	ec 29       	or	r30, r12
    74da:	fd 29       	or	r31, r13
    74dc:	84 91       	lpm	r24, Z
    74de:	23 de       	rcall	.-954    	; 0x7126 <WriteNextResponseByte>
    74e0:	bb 20       	and	r11, r11
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    74e2:	69 f0       	breq	.+26     	; 0x74fe <CDC_Task+0x1ec>
    74e4:	52 e0       	ldi	r21, 0x02	; 2
				  CurrAddress += 2;
    74e6:	c5 0e       	add	r12, r21
    74e8:	d1 1c       	adc	r13, r1
    74ea:	e1 1c       	adc	r14, r1
    74ec:	f1 1c       	adc	r15, r1
    74ee:	c0 92 ba 01 	sts	0x01BA, r12	; 0x8001ba <CurrAddress>
    74f2:	d0 92 bb 01 	sts	0x01BB, r13	; 0x8001bb <CurrAddress+0x1>
    74f6:	e0 92 bc 01 	sts	0x01BC, r14	; 0x8001bc <CurrAddress+0x2>
    74fa:	f0 92 bd 01 	sts	0x01BD, r15	; 0x8001bd <CurrAddress+0x3>

				HighByte = !HighByte;
    74fe:	b0 26       	eor	r11, r16
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    7500:	15 c0       	rjmp	.+42     	; 0x752c <CDC_Task+0x21a>
    7502:	d7 01       	movw	r26, r14
    7504:	c6 01       	movw	r24, r12
    7506:	b6 95       	lsr	r27
    7508:	a7 95       	ror	r26
    750a:	97 95       	ror	r25
    750c:	87 95       	ror	r24
    750e:	b7 d4       	rcall	.+2414   	; 0x7e7e <eeprom_read_byte>
    7510:	0a de       	rcall	.-1004   	; 0x7126 <WriteNextResponseByte>
    7512:	82 e0       	ldi	r24, 0x02	; 2

				/* Increment the address counter after use */
				CurrAddress += 2;
    7514:	c8 0e       	add	r12, r24
    7516:	d1 1c       	adc	r13, r1
    7518:	e1 1c       	adc	r14, r1
    751a:	f1 1c       	adc	r15, r1
    751c:	c0 92 ba 01 	sts	0x01BA, r12	; 0x8001ba <CurrAddress>
    7520:	d0 92 bb 01 	sts	0x01BB, r13	; 0x8001bb <CurrAddress+0x1>
    7524:	e0 92 bc 01 	sts	0x01BC, r14	; 0x8001bc <CurrAddress+0x2>
    7528:	f0 92 bd 01 	sts	0x01BD, r15	; 0x8001bd <CurrAddress+0x3>
    752c:	21 97       	sbiw	r28, 0x01	; 1
    752e:	c5 cf       	rjmp	.-118    	; 0x74ba <CDC_Task+0x1a8>
    7530:	80 90 ba 01 	lds	r8, 0x01BA	; 0x8001ba <CurrAddress>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    7534:	90 90 bb 01 	lds	r9, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    7538:	a0 90 bc 01 	lds	r10, 0x01BC	; 0x8001bc <CurrAddress+0x2>
    753c:	b0 90 bd 01 	lds	r11, 0x01BD	; 0x8001bd <CurrAddress+0x3>
    7540:	16 34       	cpi	r17, 0x46	; 70

		if (MemoryType == 'F')
    7542:	41 f4       	brne	.+16     	; 0x7554 <CDC_Task+0x242>
    7544:	23 e0       	ldi	r18, 0x03	; 3
		{
			boot_page_erase(PageStartAddress);
    7546:	f4 01       	movw	r30, r8
    7548:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    754c:	e8 95       	spm
    754e:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
    7550:	00 fc       	sbrc	r0, 0
    7552:	fd cf       	rjmp	.-6      	; 0x754e <CDC_Task+0x23c>
    7554:	e1 2c       	mov	r14, r1
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == 'F')
    7556:	f1 2c       	mov	r15, r1
    7558:	ec 01       	movw	r28, r24
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
    755a:	01 e0       	ldi	r16, 0x01	; 1
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    755c:	20 97       	sbiw	r28, 0x00	; 0
    755e:	09 f4       	brne	.+2      	; 0x7562 <CDC_Task+0x250>
    7560:	4d c0       	rjmp	.+154    	; 0x75fc <CDC_Task+0x2ea>
		{
			if (MemoryType == 'F')
    7562:	16 34       	cpi	r17, 0x46	; 70
    7564:	39 f5       	brne	.+78     	; 0x75b4 <CDC_Task+0x2a2>
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    7566:	ff 20       	and	r15, r15
    7568:	09 f1       	breq	.+66     	; 0x75ac <CDC_Task+0x29a>
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    756a:	40 90 ba 01 	lds	r4, 0x01BA	; 0x8001ba <CurrAddress>
    756e:	50 90 bb 01 	lds	r5, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    7572:	60 90 bc 01 	lds	r6, 0x01BC	; 0x8001bc <CurrAddress+0x2>
    7576:	70 90 bd 01 	lds	r7, 0x01BD	; 0x8001bd <CurrAddress+0x3>
    757a:	be dd       	rcall	.-1156   	; 0x70f8 <FetchNextCommandByte>
    757c:	2e 2d       	mov	r18, r14
    757e:	30 e0       	ldi	r19, 0x00	; 0
    7580:	a9 01       	movw	r20, r18
    7582:	58 2b       	or	r21, r24
    7584:	f2 01       	movw	r30, r4
    7586:	0a 01       	movw	r0, r20
    7588:	00 93 57 00 	sts	0x0057, r16	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    758c:	e8 95       	spm
    758e:	11 24       	eor	r1, r1

					/* Increment the address counter after use */
					CurrAddress += 2;
    7590:	f2 e0       	ldi	r31, 0x02	; 2
    7592:	4f 0e       	add	r4, r31
    7594:	51 1c       	adc	r5, r1
    7596:	61 1c       	adc	r6, r1
    7598:	71 1c       	adc	r7, r1
    759a:	40 92 ba 01 	sts	0x01BA, r4	; 0x8001ba <CurrAddress>
    759e:	50 92 bb 01 	sts	0x01BB, r5	; 0x8001bb <CurrAddress+0x1>
    75a2:	60 92 bc 01 	sts	0x01BC, r6	; 0x8001bc <CurrAddress+0x2>
    75a6:	70 92 bd 01 	sts	0x01BD, r7	; 0x8001bd <CurrAddress+0x3>
				}
				else
				{
					LowByte = FetchNextCommandByte();
    75aa:	02 c0       	rjmp	.+4      	; 0x75b0 <CDC_Task+0x29e>
    75ac:	a5 dd       	rcall	.-1206   	; 0x70f8 <FetchNextCommandByte>
    75ae:	e8 2e       	mov	r14, r24
				}
				
				HighByte = !HighByte;
    75b0:	f0 26       	eor	r15, r16
    75b2:	22 c0       	rjmp	.+68     	; 0x75f8 <CDC_Task+0x2e6>
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    75b4:	a1 dd       	rcall	.-1214   	; 0x70f8 <FetchNextCommandByte>
    75b6:	68 2f       	mov	r22, r24
    75b8:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <CurrAddress>
    75bc:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    75c0:	a0 91 bc 01 	lds	r26, 0x01BC	; 0x8001bc <CurrAddress+0x2>
    75c4:	b0 91 bd 01 	lds	r27, 0x01BD	; 0x8001bd <CurrAddress+0x3>
    75c8:	b6 95       	lsr	r27
    75ca:	a7 95       	ror	r26
    75cc:	97 95       	ror	r25
    75ce:	87 95       	ror	r24
    75d0:	5e d4       	rcall	.+2236   	; 0x7e8e <eeprom_write_byte>
    75d2:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <CurrAddress>

				/* Increment the address counter after use */
				CurrAddress += 2;
    75d6:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    75da:	a0 91 bc 01 	lds	r26, 0x01BC	; 0x8001bc <CurrAddress+0x2>
    75de:	b0 91 bd 01 	lds	r27, 0x01BD	; 0x8001bd <CurrAddress+0x3>
    75e2:	02 96       	adiw	r24, 0x02	; 2
    75e4:	a1 1d       	adc	r26, r1
    75e6:	b1 1d       	adc	r27, r1
    75e8:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <CurrAddress>
    75ec:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <CurrAddress+0x1>
    75f0:	a0 93 bc 01 	sts	0x01BC, r26	; 0x8001bc <CurrAddress+0x2>
    75f4:	b0 93 bd 01 	sts	0x01BD, r27	; 0x8001bd <CurrAddress+0x3>
    75f8:	21 97       	sbiw	r28, 0x01	; 1
    75fa:	b0 cf       	rjmp	.-160    	; 0x755c <CDC_Task+0x24a>
    75fc:	16 34       	cpi	r17, 0x46	; 70
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    75fe:	41 f4       	brne	.+16     	; 0x7610 <CDC_Task+0x2fe>
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    7600:	85 e0       	ldi	r24, 0x05	; 5
    7602:	f4 01       	movw	r30, r8
    7604:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7608:	e8 95       	spm

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    760a:	07 b6       	in	r0, 0x37	; 55
    760c:	00 fc       	sbrc	r0, 0
    760e:	fd cf       	rjmp	.-6      	; 0x760a <CDC_Task+0x2f8>
		}

		/* Send response byte back to the host */
		WriteNextResponseByte('\r');
    7610:	8d e0       	ldi	r24, 0x0D	; 13
    7612:	89 dd       	rcall	.-1262   	; 0x7126 <WriteNextResponseByte>
    7614:	82 e0       	ldi	r24, 0x02	; 2
	}

	/* Re-enable timer 1 interrupt disabled earlier in this routine */	
	TIMSK1 = (1 << OCIE1A);
    7616:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    761a:	94 c0       	rjmp	.+296    	; 0x7744 <CDC_Task+0x432>
    761c:	83 34       	cpi	r24, 0x43	; 67
		// Delegate the block write/read to a separate function for clarity 
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
    761e:	71 f4       	brne	.+28     	; 0x763c <CDC_Task+0x32a>
    7620:	c0 91 ba 01 	lds	r28, 0x01BA	; 0x8001ba <CurrAddress>
	{
		// Write the high byte to the current flash page
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    7624:	d0 91 bb 01 	lds	r29, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    7628:	67 dd       	rcall	.-1330   	; 0x70f8 <FetchNextCommandByte>
    762a:	90 e0       	ldi	r25, 0x00	; 0
    762c:	21 e0       	ldi	r18, 0x01	; 1
    762e:	fe 01       	movw	r30, r28
    7630:	0c 01       	movw	r0, r24
    7632:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7636:	e8 95       	spm
    7638:	11 24       	eor	r1, r1
    763a:	a0 ce       	rjmp	.-704    	; 0x737c <CDC_Task+0x6a>
    763c:	83 36       	cpi	r24, 0x63	; 99

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
    763e:	01 f5       	brne	.+64     	; 0x7680 <CDC_Task+0x36e>
    7640:	c0 90 ba 01 	lds	r12, 0x01BA	; 0x8001ba <CurrAddress>
	{
		// Write the low byte to the current flash page 
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    7644:	d0 90 bb 01 	lds	r13, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    7648:	e0 90 bc 01 	lds	r14, 0x01BC	; 0x8001bc <CurrAddress+0x2>
    764c:	f0 90 bd 01 	lds	r15, 0x01BD	; 0x8001bd <CurrAddress+0x3>
    7650:	53 dd       	rcall	.-1370   	; 0x70f8 <FetchNextCommandByte>
    7652:	f6 01       	movw	r30, r12
    7654:	e1 60       	ori	r30, 0x01	; 1
    7656:	90 e0       	ldi	r25, 0x00	; 0
    7658:	21 e0       	ldi	r18, 0x01	; 1
    765a:	0c 01       	movw	r0, r24
    765c:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7660:	e8 95       	spm
    7662:	11 24       	eor	r1, r1
    7664:	f2 e0       	ldi	r31, 0x02	; 2
    7666:	cf 0e       	add	r12, r31

		// Increment the address 
		CurrAddress += 2;
    7668:	d1 1c       	adc	r13, r1
    766a:	e1 1c       	adc	r14, r1
    766c:	f1 1c       	adc	r15, r1
    766e:	c0 92 ba 01 	sts	0x01BA, r12	; 0x8001ba <CurrAddress>
    7672:	d0 92 bb 01 	sts	0x01BB, r13	; 0x8001bb <CurrAddress+0x1>
    7676:	e0 92 bc 01 	sts	0x01BC, r14	; 0x8001bc <CurrAddress+0x2>
    767a:	f0 92 bd 01 	sts	0x01BD, r15	; 0x8001bd <CurrAddress+0x3>
    767e:	7e ce       	rjmp	.-772    	; 0x737c <CDC_Task+0x6a>
    7680:	8d 36       	cpi	r24, 0x6D	; 109

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
    7682:	61 f4       	brne	.+24     	; 0x769c <CDC_Task+0x38a>
    7684:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <CurrAddress>
	{
		// Commit the flash page to memory
		boot_page_write(CurrAddress);
    7688:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    768c:	85 e0       	ldi	r24, 0x05	; 5
    768e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7692:	e8 95       	spm

		// Wait until write operation has completed 
		boot_spm_busy_wait();
    7694:	07 b6       	in	r0, 0x37	; 55
    7696:	00 fc       	sbrc	r0, 0
    7698:	fd cf       	rjmp	.-6      	; 0x7694 <CDC_Task+0x382>
    769a:	70 ce       	rjmp	.-800    	; 0x737c <CDC_Task+0x6a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
    769c:	82 35       	cpi	r24, 0x52	; 82
    769e:	51 f4       	brne	.+20     	; 0x76b4 <CDC_Task+0x3a2>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    76a0:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <CurrAddress>
    76a4:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    76a8:	c5 91       	lpm	r28, Z+
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    76aa:	d4 91       	lpm	r29, Z
    76ac:	8d 2f       	mov	r24, r29
    76ae:	3b dd       	rcall	.-1418   	; 0x7126 <WriteNextResponseByte>
		WriteNextResponseByte(ProgramWord & 0xFF);
    76b0:	8c 2f       	mov	r24, r28
    76b2:	65 ce       	rjmp	.-822    	; 0x737e <CDC_Task+0x6c>
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
    76b4:	84 34       	cpi	r24, 0x44	; 68
    76b6:	19 f5       	brne	.+70     	; 0x76fe <CDC_Task+0x3ec>
	{
		// Read the byte from the endpoint and write it to the EEPROM 
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    76b8:	1f dd       	rcall	.-1474   	; 0x70f8 <FetchNextCommandByte>
    76ba:	68 2f       	mov	r22, r24
    76bc:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <CurrAddress>
    76c0:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    76c4:	a0 91 bc 01 	lds	r26, 0x01BC	; 0x8001bc <CurrAddress+0x2>
    76c8:	b0 91 bd 01 	lds	r27, 0x01BD	; 0x8001bd <CurrAddress+0x3>
    76cc:	b6 95       	lsr	r27
    76ce:	a7 95       	ror	r26
    76d0:	97 95       	ror	r25
    76d2:	87 95       	ror	r24
    76d4:	dc d3       	rcall	.+1976   	; 0x7e8e <eeprom_write_byte>
    76d6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <CurrAddress>

		// Increment the address after use
		CurrAddress += 2;
    76da:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    76de:	a0 91 bc 01 	lds	r26, 0x01BC	; 0x8001bc <CurrAddress+0x2>
    76e2:	b0 91 bd 01 	lds	r27, 0x01BD	; 0x8001bd <CurrAddress+0x3>
    76e6:	02 96       	adiw	r24, 0x02	; 2
    76e8:	a1 1d       	adc	r26, r1
    76ea:	b1 1d       	adc	r27, r1
    76ec:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <CurrAddress>
    76f0:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <CurrAddress+0x1>
    76f4:	a0 93 bc 01 	sts	0x01BC, r26	; 0x8001bc <CurrAddress+0x2>
    76f8:	b0 93 bd 01 	sts	0x01BD, r27	; 0x8001bd <CurrAddress+0x3>
    76fc:	3f ce       	rjmp	.-898    	; 0x737c <CDC_Task+0x6a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
    76fe:	84 36       	cpi	r24, 0x64	; 100
    7700:	f1 f4       	brne	.+60     	; 0x773e <CDC_Task+0x42c>
	{
		// Read the EEPROM byte and write it to the endpoint 
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    7702:	c0 90 ba 01 	lds	r12, 0x01BA	; 0x8001ba <CurrAddress>
    7706:	d0 90 bb 01 	lds	r13, 0x01BB	; 0x8001bb <CurrAddress+0x1>
    770a:	e0 90 bc 01 	lds	r14, 0x01BC	; 0x8001bc <CurrAddress+0x2>
    770e:	f0 90 bd 01 	lds	r15, 0x01BD	; 0x8001bd <CurrAddress+0x3>
    7712:	d7 01       	movw	r26, r14
    7714:	c6 01       	movw	r24, r12
    7716:	b6 95       	lsr	r27
    7718:	a7 95       	ror	r26
    771a:	97 95       	ror	r25
    771c:	87 95       	ror	r24
    771e:	af d3       	rcall	.+1886   	; 0x7e7e <eeprom_read_byte>
    7720:	02 dd       	rcall	.-1532   	; 0x7126 <WriteNextResponseByte>
    7722:	22 e0       	ldi	r18, 0x02	; 2
    7724:	c2 0e       	add	r12, r18

		// Increment the address after use 
		CurrAddress += 2;
    7726:	d1 1c       	adc	r13, r1
    7728:	e1 1c       	adc	r14, r1
    772a:	f1 1c       	adc	r15, r1
    772c:	c0 92 ba 01 	sts	0x01BA, r12	; 0x8001ba <CurrAddress>
    7730:	d0 92 bb 01 	sts	0x01BB, r13	; 0x8001bb <CurrAddress+0x1>
    7734:	e0 92 bc 01 	sts	0x01BC, r14	; 0x8001bc <CurrAddress+0x2>
    7738:	f0 92 bd 01 	sts	0x01BD, r15	; 0x8001bd <CurrAddress+0x3>
    773c:	03 c0       	rjmp	.+6      	; 0x7744 <CDC_Task+0x432>
    773e:	8b 31       	cpi	r24, 0x1B	; 27
    7740:	09 f0       	breq	.+2      	; 0x7744 <CDC_Task+0x432>
	}
	#endif
	else if (Command != 27)
    7742:	aa ce       	rjmp	.-684    	; 0x7498 <CDC_Task+0x186>
    7744:	83 e0       	ldi	r24, 0x03	; 3
    7746:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    774a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    774e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7752:	8e 77       	andi	r24, 0x7E	; 126
    7754:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7758:	95 fd       	sbrc	r25, 5
    775a:	11 c0       	rjmp	.+34     	; 0x777e <CDC_Task+0x46c>

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    775c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7760:	80 fd       	sbrc	r24, 0
    7762:	04 c0       	rjmp	.+8      	; 0x776c <CDC_Task+0x45a>
	{
		while (!(Endpoint_IsINReady()))
    7764:	8e b3       	in	r24, 0x1e	; 30
    7766:	81 11       	cpse	r24, r1
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7768:	f9 cf       	rjmp	.-14     	; 0x775c <CDC_Task+0x44a>
    776a:	15 c0       	rjmp	.+42     	; 0x7796 <CDC_Task+0x484>
    776c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7770:	8e 77       	andi	r24, 0x7E	; 126
    7772:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7776:	03 c0       	rjmp	.+6      	; 0x777e <CDC_Task+0x46c>
    7778:	8e b3       	in	r24, 0x1e	; 30
    777a:	88 23       	and	r24, r24
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    777c:	61 f0       	breq	.+24     	; 0x7796 <CDC_Task+0x484>
    777e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7782:	80 ff       	sbrs	r24, 0
    7784:	f9 cf       	rjmp	.-14     	; 0x7778 <CDC_Task+0x466>

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    7786:	84 e0       	ldi	r24, 0x04	; 4
    7788:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    778c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7790:	8b 77       	andi	r24, 0x7B	; 123
    7792:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7796:	df 91       	pop	r29
    7798:	cf 91       	pop	r28
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
    779a:	1f 91       	pop	r17
    779c:	0f 91       	pop	r16
    779e:	ff 90       	pop	r15
    77a0:	ef 90       	pop	r14
    77a2:	df 90       	pop	r13
    77a4:	cf 90       	pop	r12
    77a6:	bf 90       	pop	r11
    77a8:	af 90       	pop	r10
    77aa:	9f 90       	pop	r9
    77ac:	8f 90       	pop	r8
    77ae:	7f 90       	pop	r7
    77b0:	6f 90       	pop	r6
    77b2:	5f 90       	pop	r5
    77b4:	4f 90       	pop	r4
    77b6:	08 95       	ret

000077b8 <main>:
    77b8:	20 91 00 08 	lds	r18, 0x0800	; 0x800800 <__bss_end+0x636>
 *  runs the bootloader processing routine until it times out or is instructed to exit.
 */
int main(void)
{
	/* Save the value of the boot key memory before it is overwritten */
	uint16_t bootKeyPtrVal = *bootKeyPtr;
    77bc:	30 91 01 08 	lds	r19, 0x0801	; 0x800801 <__bss_end+0x637>
	*bootKeyPtr = 0;
    77c0:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <__bss_end+0x637>
    77c4:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__bss_end+0x636>

	/* Check the reason for the reset so we can act accordingly */
	uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
    77c8:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;							// clear all reset flags	
    77ca:	14 be       	out	0x34, r1	; 52
    77cc:	0f b6       	in	r0, 0x3f	; 63
    77ce:	f8 94       	cli
    77d0:	a8 95       	wdr
    77d2:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    77d6:	98 61       	ori	r25, 0x18	; 24
    77d8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    77dc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    77e0:	0f be       	out	0x3f, r0	; 63

	/* Watchdog may be configured with a 15 ms period so must disable it before going any further */
	wdt_disable();
	
	if (mcusr_state & (1<<EXTRF)) {
    77e2:	81 fd       	sbrc	r24, 1
    77e4:	1a c0       	rjmp	.+52     	; 0x781a <main+0x62>
		// External reset -  we should continue to self-programming mode.
	} else if ((mcusr_state & (1<<PORF)) && (pgm_read_word(0) != 0xFFFF)) {		
    77e6:	80 ff       	sbrs	r24, 0
    77e8:	09 c0       	rjmp	.+18     	; 0x77fc <main+0x44>
    77ea:	e0 e0       	ldi	r30, 0x00	; 0
    77ec:	f0 e0       	ldi	r31, 0x00	; 0
    77ee:	45 91       	lpm	r20, Z+
    77f0:	54 91       	lpm	r21, Z
    77f2:	4f 3f       	cpi	r20, 0xFF	; 255
    77f4:	5f 4f       	sbci	r21, 0xFF	; 255
    77f6:	11 f0       	breq	.+4      	; 0x77fc <main+0x44>
		// After a power-on reset skip the bootloader and jump straight to sketch 
		// if one exists.	
		StartSketch();
    77f8:	b4 dc       	rcall	.-1688   	; 0x7162 <StartSketch>
    77fa:	0f c0       	rjmp	.+30     	; 0x781a <main+0x62>
	} else if ((mcusr_state & (1<<WDRF)) && (bootKeyPtrVal != bootKey) && (pgm_read_word(0) != 0xFFFF)) {	
    77fc:	83 ff       	sbrs	r24, 3
    77fe:	0d c0       	rjmp	.+26     	; 0x781a <main+0x62>
    7800:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    7804:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    7808:	28 17       	cp	r18, r24
    780a:	39 07       	cpc	r19, r25
    780c:	31 f0       	breq	.+12     	; 0x781a <main+0x62>
    780e:	e0 e0       	ldi	r30, 0x00	; 0
    7810:	f0 e0       	ldi	r31, 0x00	; 0
    7812:	85 91       	lpm	r24, Z+
    7814:	94 91       	lpm	r25, Z
    7816:	01 96       	adiw	r24, 0x01	; 1
		// If it looks like an "accidental" watchdog reset then start the sketch.
		StartSketch();
	}
	
	/* Setup hardware required for the bootloader */
	SetupHardware();
    7818:	79 f7       	brne	.-34     	; 0x77f8 <main+0x40>
    781a:	ce dc       	rcall	.-1636   	; 0x71b8 <SetupHardware>

	/* Enable global interrupts so that the USB stack can function */
	sei();
    781c:	78 94       	sei
	
	Timeout = 0;
    781e:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <__data_end+0x1>
    7822:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <__data_end>
	
	while (RunBootloader)
    7826:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <RunBootloader>
    782a:	88 23       	and	r24, r24
	{
		CDC_Task();
    782c:	69 f0       	breq	.+26     	; 0x7848 <main+0x90>
    782e:	71 dd       	rcall	.-1310   	; 0x7312 <CDC_Task>
		USB_USBTask();
    7830:	0f d3       	rcall	.+1566   	; 0x7e50 <USB_USBTask>
    7832:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
		/* Time out and start the sketch if one is present */
		if (Timeout > TIMEOUT_PERIOD)
    7836:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <__data_end+0x1>
    783a:	81 34       	cpi	r24, 0x41	; 65
    783c:	9f 41       	sbci	r25, 0x1F	; 31
    783e:	10 f0       	brcs	.+4      	; 0x7844 <main+0x8c>
			RunBootloader = false;
    7840:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <RunBootloader>

		LEDPulse();
    7844:	a0 dc       	rcall	.-1728   	; 0x7186 <LEDPulse>
    7846:	ef cf       	rjmp	.-34     	; 0x7826 <main+0x6e>
    7848:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    784c:	81 60       	ori	r24, 0x01	; 1
    784e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Jump to beginning of application space to run the sketch - do not reset */	
	StartSketch();
    7852:	87 dc       	rcall	.-1778   	; 0x7162 <StartSketch>
    7854:	80 e0       	ldi	r24, 0x00	; 0
}
    7856:	90 e0       	ldi	r25, 0x00	; 0
    7858:	08 95       	ret

0000785a <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    785a:	29 2f       	mov	r18, r25
    785c:	30 e0       	ldi	r19, 0x00	; 0
    785e:	22 30       	cpi	r18, 0x02	; 2
    7860:	31 05       	cpc	r19, r1
    7862:	59 f0       	breq	.+22     	; 0x787a <CALLBACK_USB_GetDescriptor+0x20>
    7864:	23 30       	cpi	r18, 0x03	; 3
    7866:	31 05       	cpc	r19, r1
    7868:	69 f0       	breq	.+26     	; 0x7884 <CALLBACK_USB_GetDescriptor+0x2a>
    786a:	21 30       	cpi	r18, 0x01	; 1
    786c:	31 05       	cpc	r19, r1
    786e:	f9 f4       	brne	.+62     	; 0x78ae <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    7870:	82 e1       	ldi	r24, 0x12	; 18
    7872:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    7874:	28 e9       	ldi	r18, 0x98	; 152
    7876:	31 e0       	ldi	r19, 0x01	; 1
    7878:	1e c0       	rjmp	.+60     	; 0x78b6 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    787a:	8e e3       	ldi	r24, 0x3E	; 62
    787c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    787e:	2a e5       	ldi	r18, 0x5A	; 90
    7880:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    7882:	19 c0       	rjmp	.+50     	; 0x78b6 <CALLBACK_USB_GetDescriptor+0x5c>
		case DTYPE_String:
			if (!(DescriptorNumber))
    7884:	88 23       	and	r24, r24
    7886:	49 f0       	breq	.+18     	; 0x789a <CALLBACK_USB_GetDescriptor+0x40>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    7888:	81 30       	cpi	r24, 0x01	; 1
    788a:	61 f0       	breq	.+24     	; 0x78a4 <CALLBACK_USB_GetDescriptor+0x4a>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    788c:	82 30       	cpi	r24, 0x02	; 2
    788e:	79 f4       	brne	.+30     	; 0x78ae <CALLBACK_USB_GetDescriptor+0x54>
			{
				Address = &ManufNameString;
				Size	= ManufNameString.Header.Size;
    7890:	8a e2       	ldi	r24, 0x2A	; 42
    7892:	90 e0       	ldi	r25, 0x00	; 0
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
			{
				Address = &ManufNameString;
    7894:	2a e0       	ldi	r18, 0x0A	; 10
    7896:	31 e0       	ldi	r19, 0x01	; 1
    7898:	0e c0       	rjmp	.+28     	; 0x78b6 <CALLBACK_USB_GetDescriptor+0x5c>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    789a:	84 e0       	ldi	r24, 0x04	; 4
    789c:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    789e:	26 e5       	ldi	r18, 0x56	; 86
    78a0:	31 e0       	ldi	r19, 0x01	; 1
    78a2:	09 c0       	rjmp	.+18     	; 0x78b6 <CALLBACK_USB_GetDescriptor+0x5c>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    78a4:	8e e1       	ldi	r24, 0x1E	; 30
    78a6:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
			{
				Address = &ProductString;
    78a8:	26 e3       	ldi	r18, 0x36	; 54
    78aa:	31 e0       	ldi	r19, 0x01	; 1
    78ac:	04 c0       	rjmp	.+8      	; 0x78b6 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    78ae:	80 e0       	ldi	r24, 0x00	; 0
    78b0:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    78b2:	20 e0       	ldi	r18, 0x00	; 0
    78b4:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    78b6:	fa 01       	movw	r30, r20
    78b8:	31 83       	std	Z+1, r19	; 0x01
    78ba:	20 83       	st	Z, r18
	return Size;
}
    78bc:	08 95       	ret

000078be <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    78be:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    78c2:	eb ee       	ldi	r30, 0xEB	; 235
    78c4:	f0 e0       	ldi	r31, 0x00	; 0
    78c6:	80 81       	ld	r24, Z
    78c8:	81 60       	ori	r24, 0x01	; 1
    78ca:	80 83       	st	Z, r24
    78cc:	ed ee       	ldi	r30, 0xED	; 237
    78ce:	f0 e0       	ldi	r31, 0x00	; 0
    78d0:	10 82       	st	Z, r1
    78d2:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    78d6:	40 83       	st	Z, r20
    78d8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    78dc:	88 1f       	adc	r24, r24
    78de:	88 27       	eor	r24, r24
    78e0:	88 1f       	adc	r24, r24
    78e2:	08 95       	ret

000078e4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    78e4:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <USB_ControlRequest>
    78e8:	87 ff       	sbrs	r24, 7
    78ea:	0f c0       	rjmp	.+30     	; 0x790a <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    78ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		while (!(Endpoint_IsOUTReceived()))
    78f0:	82 fd       	sbrc	r24, 2
    78f2:	04 c0       	rjmp	.+8      	; 0x78fc <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78f4:	8e b3       	in	r24, 0x1e	; 30
    78f6:	81 11       	cpse	r24, r1
    78f8:	f9 cf       	rjmp	.-14     	; 0x78ec <Endpoint_ClearStatusStage+0x8>
    78fa:	10 c0       	rjmp	.+32     	; 0x791c <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    78fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7900:	8b 77       	andi	r24, 0x7B	; 123
    7902:	0a c0       	rjmp	.+20     	; 0x7918 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7904:	8e b3       	in	r24, 0x1e	; 30
    7906:	88 23       	and	r24, r24
    7908:	49 f0       	breq	.+18     	; 0x791c <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    790a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    790e:	80 ff       	sbrs	r24, 0
    7910:	f9 cf       	rjmp	.-14     	; 0x7904 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7912:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7916:	8e 77       	andi	r24, 0x7E	; 126
    7918:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    791c:	08 95       	ret

0000791e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    791e:	0f 93       	push	r16
    7920:	1f 93       	push	r17
    7922:	cf 93       	push	r28
    7924:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    7926:	41 d0       	rcall	.+130    	; 0x79aa <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7928:	48 d0       	rcall	.+144    	; 0x79ba <USB_INT_ClearAllInterrupts>
    792a:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    792c:	d0 e0       	ldi	r29, 0x00	; 0
    792e:	88 81       	ld	r24, Y
    7930:	8f 77       	andi	r24, 0x7F	; 127
    7932:	88 83       	st	Y, r24
    7934:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    7936:	80 68       	ori	r24, 0x80	; 128
    7938:	88 83       	st	Y, r24
    793a:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    793c:	8f 7d       	andi	r24, 0xDF	; 223
    793e:	88 83       	st	Y, r24
    7940:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7942:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    7944:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    7948:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    794a:	10 e0       	ldi	r17, 0x00	; 0
    794c:	f8 01       	movw	r30, r16
    794e:	80 81       	ld	r24, Z
    7950:	8b 7f       	andi	r24, 0xFB	; 251
    7952:	80 83       	st	Z, r24
    7954:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7956:	81 60       	ori	r24, 0x01	; 1
    7958:	88 83       	st	Y, r24
    795a:	42 e0       	ldi	r20, 0x02	; 2
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    795c:	60 e0       	ldi	r22, 0x00	; 0
    795e:	80 e0       	ldi	r24, 0x00	; 0
    7960:	ae df       	rcall	.-164    	; 0x78be <Endpoint_ConfigureEndpoint_Prv>
    7962:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7964:	f0 e0       	ldi	r31, 0x00	; 0
    7966:	80 81       	ld	r24, Z
    7968:	8e 7f       	andi	r24, 0xFE	; 254
    796a:	80 83       	st	Z, r24
    796c:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    796e:	f0 e0       	ldi	r31, 0x00	; 0
    7970:	80 81       	ld	r24, Z
    7972:	81 60       	ori	r24, 0x01	; 1
    7974:	80 83       	st	Z, r24
    7976:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7978:	88 60       	ori	r24, 0x08	; 8
    797a:	80 83       	st	Z, r24
    797c:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    797e:	80 81       	ld	r24, Z
    7980:	8e 7f       	andi	r24, 0xFE	; 254
    7982:	80 83       	st	Z, r24
    7984:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    7986:	80 61       	ori	r24, 0x10	; 16
    7988:	88 83       	st	Y, r24
    798a:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    798c:	cf 91       	pop	r28
    798e:	1f 91       	pop	r17
    7990:	0f 91       	pop	r16
    7992:	08 95       	ret

00007994 <USB_Init>:
    7994:	e7 ed       	ldi	r30, 0xD7	; 215

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    7996:	f0 e0       	ldi	r31, 0x00	; 0
    7998:	80 81       	ld	r24, Z
    799a:	81 60       	ori	r24, 0x01	; 1
    799c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    799e:	8a e4       	ldi	r24, 0x4A	; 74
    79a0:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    79a2:	81 e0       	ldi	r24, 0x01	; 1
    79a4:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <USB_IsInitialized>

	USB_ResetInterface();
    79a8:	ba cf       	rjmp	.-140    	; 0x791e <USB_ResetInterface>

000079aa <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    79aa:	e8 ed       	ldi	r30, 0xD8	; 216
    79ac:	f0 e0       	ldi	r31, 0x00	; 0
    79ae:	80 81       	ld	r24, Z
    79b0:	8e 7f       	andi	r24, 0xFE	; 254
    79b2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    79b4:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    79b8:	08 95       	ret

000079ba <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    79ba:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    79be:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    79c2:	08 95       	ret

000079c4 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    79c4:	1f 92       	push	r1
    79c6:	0f 92       	push	r0
    79c8:	0f b6       	in	r0, 0x3f	; 63
    79ca:	0f 92       	push	r0
    79cc:	11 24       	eor	r1, r1
    79ce:	2f 93       	push	r18
    79d0:	3f 93       	push	r19
    79d2:	4f 93       	push	r20
    79d4:	5f 93       	push	r21
    79d6:	6f 93       	push	r22
    79d8:	7f 93       	push	r23
    79da:	8f 93       	push	r24
    79dc:	9f 93       	push	r25
    79de:	af 93       	push	r26
    79e0:	bf 93       	push	r27
    79e2:	ef 93       	push	r30
    79e4:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    79e6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    79ea:	80 ff       	sbrs	r24, 0
    79ec:	1b c0       	rjmp	.+54     	; 0x7a24 <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    79ee:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    79f2:	80 ff       	sbrs	r24, 0
    79f4:	17 c0       	rjmp	.+46     	; 0x7a24 <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    79f6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
    79fa:	8e 7f       	andi	r24, 0xFE	; 254
    79fc:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7a00:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7a04:	80 ff       	sbrs	r24, 0
    7a06:	0b c0       	rjmp	.+22     	; 0x7a1e <__vector_10+0x5a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7a08:	80 e1       	ldi	r24, 0x10	; 16
    7a0a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a0c:	82 e1       	ldi	r24, 0x12	; 18
    7a0e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7a10:	09 b4       	in	r0, 0x29	; 41
    7a12:	00 fe       	sbrs	r0, 0
    7a14:	fd cf       	rjmp	.-6      	; 0x7a10 <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7a16:	81 e0       	ldi	r24, 0x01	; 1
    7a18:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7a1a:	19 d2       	rcall	.+1074   	; 0x7e4e <USB_Event_Stub>
    7a1c:	03 c0       	rjmp	.+6      	; 0x7a24 <__vector_10+0x60>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a1e:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
    7a20:	1e ba       	out	0x1e, r1	; 30
    7a22:	15 d2       	rcall	.+1066   	; 0x7e4e <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7a24:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7a28:	80 ff       	sbrs	r24, 0
    7a2a:	17 c0       	rjmp	.+46     	; 0x7a5a <__vector_10+0x96>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7a2c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a30:	80 ff       	sbrs	r24, 0
    7a32:	13 c0       	rjmp	.+38     	; 0x7a5a <__vector_10+0x96>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7a34:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a38:	8e 7f       	andi	r24, 0xFE	; 254
    7a3a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7a3e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a42:	80 61       	ori	r24, 0x10	; 16
    7a44:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7a48:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    7a4c:	80 62       	ori	r24, 0x20	; 32
    7a4e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a52:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7a54:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    7a56:	8e bb       	out	0x1e, r24	; 30
    7a58:	fa d1       	rcall	.+1012   	; 0x7e4e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7a5a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7a5e:	84 ff       	sbrs	r24, 4
    7a60:	2c c0       	rjmp	.+88     	; 0x7aba <__vector_10+0xf6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7a62:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a66:	84 ff       	sbrs	r24, 4
    7a68:	28 c0       	rjmp	.+80     	; 0x7aba <__vector_10+0xf6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7a6a:	80 e1       	ldi	r24, 0x10	; 16
    7a6c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a6e:	82 e1       	ldi	r24, 0x12	; 18
    7a70:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7a72:	09 b4       	in	r0, 0x29	; 41
    7a74:	00 fe       	sbrs	r0, 0
    7a76:	fd cf       	rjmp	.-6      	; 0x7a72 <__vector_10+0xae>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7a78:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    7a7c:	8f 7d       	andi	r24, 0xDF	; 223
    7a7e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7a82:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    7a86:	8f 7e       	andi	r24, 0xEF	; 239
    7a88:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7a8c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a90:	8f 7e       	andi	r24, 0xEF	; 239
    7a92:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7a96:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7a9a:	81 60       	ori	r24, 0x01	; 1
    7a9c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7aa0:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <USB_Device_ConfigurationNumber>
    7aa4:	81 11       	cpse	r24, r1
    7aa6:	06 c0       	rjmp	.+12     	; 0x7ab4 <__vector_10+0xf0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7aa8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7aac:	87 fd       	sbrc	r24, 7
    7aae:	02 c0       	rjmp	.+4      	; 0x7ab4 <__vector_10+0xf0>
    7ab0:	81 e0       	ldi	r24, 0x01	; 1
    7ab2:	01 c0       	rjmp	.+2      	; 0x7ab6 <__vector_10+0xf2>
    7ab4:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7ab6:	8e bb       	out	0x1e, r24	; 30
    7ab8:	ca d1       	rcall	.+916    	; 0x7e4e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7aba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7abe:	83 ff       	sbrs	r24, 3
    7ac0:	21 c0       	rjmp	.+66     	; 0x7b04 <__vector_10+0x140>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7ac2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7ac6:	83 ff       	sbrs	r24, 3
    7ac8:	1d c0       	rjmp	.+58     	; 0x7b04 <__vector_10+0x140>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7aca:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    7ace:	87 7f       	andi	r24, 0xF7	; 247
    7ad0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7ad4:	82 e0       	ldi	r24, 0x02	; 2
    7ad6:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    7ad8:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7adc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    7ae0:	8e 7f       	andi	r24, 0xFE	; 254
    7ae2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7ae6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7aea:	8e 7f       	andi	r24, 0xFE	; 254
    7aec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7af0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    7af4:	80 61       	ori	r24, 0x10	; 16
    7af6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7afa:	42 e0       	ldi	r20, 0x02	; 2
    7afc:	60 e0       	ldi	r22, 0x00	; 0
    7afe:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7b00:	de de       	rcall	.-580    	; 0x78be <Endpoint_ConfigureEndpoint_Prv>
    7b02:	a5 d1       	rcall	.+842    	; 0x7e4e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7b04:	ff 91       	pop	r31
    7b06:	ef 91       	pop	r30
    7b08:	bf 91       	pop	r27
    7b0a:	af 91       	pop	r26
    7b0c:	9f 91       	pop	r25
    7b0e:	8f 91       	pop	r24
    7b10:	7f 91       	pop	r23
    7b12:	6f 91       	pop	r22
    7b14:	5f 91       	pop	r21
    7b16:	4f 91       	pop	r20
    7b18:	3f 91       	pop	r19
    7b1a:	2f 91       	pop	r18
    7b1c:	0f 90       	pop	r0
    7b1e:	0f be       	out	0x3f, r0	; 63
    7b20:	0f 90       	pop	r0
    7b22:	1f 90       	pop	r1
    7b24:	18 95       	reti

00007b26 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7b26:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <USB_ControlRequest+0x6>
    7b2a:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <USB_ControlRequest+0x7>
    7b2e:	26 17       	cp	r18, r22
    7b30:	37 07       	cpc	r19, r23
    7b32:	48 f0       	brcs	.+18     	; 0x7b46 <Endpoint_Write_Control_Stream_LE+0x20>
    7b34:	61 15       	cp	r22, r1
    7b36:	71 05       	cpc	r23, r1
    7b38:	39 f4       	brne	.+14     	; 0x7b48 <Endpoint_Write_Control_Stream_LE+0x22>
    7b3a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b3e:	2e 77       	andi	r18, 0x7E	; 126
    7b40:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b44:	01 c0       	rjmp	.+2      	; 0x7b48 <Endpoint_Write_Control_Stream_LE+0x22>
    7b46:	b9 01       	movw	r22, r18
    7b48:	fc 01       	movw	r30, r24
    7b4a:	20 e0       	ldi	r18, 0x00	; 0
    7b4c:	61 15       	cp	r22, r1
    7b4e:	71 05       	cpc	r23, r1
    7b50:	71 f1       	breq	.+92     	; 0x7bae <Endpoint_Write_Control_Stream_LE+0x88>
    7b52:	8e b3       	in	r24, 0x1e	; 30
    7b54:	88 23       	and	r24, r24
    7b56:	d9 f1       	breq	.+118    	; 0x7bce <Endpoint_Write_Control_Stream_LE+0xa8>
    7b58:	85 30       	cpi	r24, 0x05	; 5
    7b5a:	d9 f1       	breq	.+118    	; 0x7bd2 <Endpoint_Write_Control_Stream_LE+0xac>
    7b5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b60:	83 fd       	sbrc	r24, 3
    7b62:	33 c0       	rjmp	.+102    	; 0x7bca <Endpoint_Write_Control_Stream_LE+0xa4>
    7b64:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b68:	82 fd       	sbrc	r24, 2
    7b6a:	29 c0       	rjmp	.+82     	; 0x7bbe <Endpoint_Write_Control_Stream_LE+0x98>
    7b6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7b70:	80 ff       	sbrs	r24, 0
    7b72:	ec cf       	rjmp	.-40     	; 0x7b4c <Endpoint_Write_Control_Stream_LE+0x26>
    7b74:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
    7b78:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    7b7c:	90 e0       	ldi	r25, 0x00	; 0
    7b7e:	92 2b       	or	r25, r18
    7b80:	61 15       	cp	r22, r1
    7b82:	71 05       	cpc	r23, r1
    7b84:	51 f0       	breq	.+20     	; 0x7b9a <Endpoint_Write_Control_Stream_LE+0x74>
    7b86:	88 30       	cpi	r24, 0x08	; 8
    7b88:	91 05       	cpc	r25, r1
    7b8a:	38 f4       	brcc	.+14     	; 0x7b9a <Endpoint_Write_Control_Stream_LE+0x74>
    7b8c:	21 91       	ld	r18, Z+
    7b8e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    7b92:	61 50       	subi	r22, 0x01	; 1
    7b94:	71 09       	sbc	r23, r1
    7b96:	01 96       	adiw	r24, 0x01	; 1
    7b98:	f3 cf       	rjmp	.-26     	; 0x7b80 <Endpoint_Write_Control_Stream_LE+0x5a>
    7b9a:	21 e0       	ldi	r18, 0x01	; 1
    7b9c:	08 97       	sbiw	r24, 0x08	; 8
    7b9e:	09 f0       	breq	.+2      	; 0x7ba2 <Endpoint_Write_Control_Stream_LE+0x7c>
    7ba0:	20 e0       	ldi	r18, 0x00	; 0
    7ba2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7ba6:	8e 77       	andi	r24, 0x7E	; 126
    7ba8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7bac:	cf cf       	rjmp	.-98     	; 0x7b4c <Endpoint_Write_Control_Stream_LE+0x26>
    7bae:	21 11       	cpse	r18, r1
    7bb0:	d0 cf       	rjmp	.-96     	; 0x7b52 <Endpoint_Write_Control_Stream_LE+0x2c>
    7bb2:	05 c0       	rjmp	.+10     	; 0x7bbe <Endpoint_Write_Control_Stream_LE+0x98>
    7bb4:	8e b3       	in	r24, 0x1e	; 30
    7bb6:	88 23       	and	r24, r24
    7bb8:	51 f0       	breq	.+20     	; 0x7bce <Endpoint_Write_Control_Stream_LE+0xa8>
    7bba:	85 30       	cpi	r24, 0x05	; 5
    7bbc:	51 f0       	breq	.+20     	; 0x7bd2 <Endpoint_Write_Control_Stream_LE+0xac>
    7bbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7bc2:	82 ff       	sbrs	r24, 2
    7bc4:	f7 cf       	rjmp	.-18     	; 0x7bb4 <Endpoint_Write_Control_Stream_LE+0x8e>
    7bc6:	80 e0       	ldi	r24, 0x00	; 0
    7bc8:	08 95       	ret
    7bca:	81 e0       	ldi	r24, 0x01	; 1
    7bcc:	08 95       	ret
    7bce:	82 e0       	ldi	r24, 0x02	; 2
    7bd0:	08 95       	ret
    7bd2:	83 e0       	ldi	r24, 0x03	; 3
    7bd4:	08 95       	ret

00007bd6 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7bd6:	61 15       	cp	r22, r1
    7bd8:	71 05       	cpc	r23, r1
    7bda:	29 f4       	brne	.+10     	; 0x7be6 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7bdc:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7be0:	2b 77       	andi	r18, 0x7B	; 123
    7be2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    7be6:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    7be8:	61 15       	cp	r22, r1
    7bea:	71 05       	cpc	r23, r1
    7bec:	31 f1       	breq	.+76     	; 0x7c3a <Endpoint_Read_Control_Stream_LE+0x64>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7bee:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7bf0:	88 23       	and	r24, r24
    7bf2:	59 f1       	breq	.+86     	; 0x7c4a <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bf4:	85 30       	cpi	r24, 0x05	; 5
    7bf6:	59 f1       	breq	.+86     	; 0x7c4e <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7bf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7bfc:	83 fd       	sbrc	r24, 3
    7bfe:	23 c0       	rjmp	.+70     	; 0x7c46 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7c00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7c04:	82 ff       	sbrs	r24, 2
    7c06:	f0 cf       	rjmp	.-32     	; 0x7be8 <Endpoint_Read_Control_Stream_LE+0x12>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7c08:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
    7c0c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		{
			while (Length && Endpoint_BytesInEndpoint())
    7c10:	90 e0       	ldi	r25, 0x00	; 0
    7c12:	92 2b       	or	r25, r18
    7c14:	89 2b       	or	r24, r25
    7c16:	31 f0       	breq	.+12     	; 0x7c24 <Endpoint_Read_Control_Stream_LE+0x4e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c18:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7c1c:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7c1e:	61 50       	subi	r22, 0x01	; 1
    7c20:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7c22:	91 f7       	brne	.-28     	; 0x7c08 <Endpoint_Read_Control_Stream_LE+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7c24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7c28:	8b 77       	andi	r24, 0x7B	; 123
    7c2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7c2e:	dc cf       	rjmp	.-72     	; 0x7be8 <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c30:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c32:	88 23       	and	r24, r24
    7c34:	51 f0       	breq	.+20     	; 0x7c4a <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c36:	85 30       	cpi	r24, 0x05	; 5
    7c38:	51 f0       	breq	.+20     	; 0x7c4e <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7c3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7c3e:	80 ff       	sbrs	r24, 0
    7c40:	f7 cf       	rjmp	.-18     	; 0x7c30 <Endpoint_Read_Control_Stream_LE+0x5a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7c42:	80 e0       	ldi	r24, 0x00	; 0
    7c44:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7c46:	81 e0       	ldi	r24, 0x01	; 1
    7c48:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7c4a:	82 e0       	ldi	r24, 0x02	; 2
    7c4c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7c4e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7c50:	08 95       	ret

00007c52 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7c52:	0f 93       	push	r16
    7c54:	1f 93       	push	r17
    7c56:	cf 93       	push	r28
    7c58:	df 93       	push	r29
    7c5a:	00 d0       	rcall	.+0      	; 0x7c5c <USB_Device_ProcessControlRequest+0xa>
    7c5c:	cd b7       	in	r28, 0x3d	; 61
    7c5e:	de b7       	in	r29, 0x3e	; 62
    7c60:	e2 ec       	ldi	r30, 0xC2	; 194
    7c62:	f1 e0       	ldi	r31, 0x01	; 1
    7c64:	8a ec       	ldi	r24, 0xCA	; 202
    7c66:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c68:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7c6c:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7c6e:	8e 17       	cp	r24, r30
    7c70:	9f 07       	cpc	r25, r31
    7c72:	d1 f7       	brne	.-12     	; 0x7c68 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7c74:	20 db       	rcall	.-2496   	; 0x72b6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	if (Endpoint_IsSETUPReceived())
    7c7a:	83 ff       	sbrs	r24, 3
    7c7c:	d3 c0       	rjmp	.+422    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7c7e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    7c82:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <USB_ControlRequest+0x1>
    7c86:	49 2f       	mov	r20, r25
    7c88:	50 e0       	ldi	r21, 0x00	; 0
    7c8a:	4a 30       	cpi	r20, 0x0A	; 10
    7c8c:	51 05       	cpc	r21, r1
    7c8e:	08 f0       	brcs	.+2      	; 0x7c92 <USB_Device_ProcessControlRequest+0x40>
    7c90:	c9 c0       	rjmp	.+402    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
    7c92:	fa 01       	movw	r30, r20
    7c94:	ea 5a       	subi	r30, 0xAA	; 170
    7c96:	f7 4c       	sbci	r31, 0xC7	; 199
    7c98:	ec c0       	rjmp	.+472    	; 0x7e72 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c9a:	82 38       	cpi	r24, 0x82	; 130
    7c9c:	09 f0       	breq	.+2      	; 0x7ca0 <USB_Device_ProcessControlRequest+0x4e>
    7c9e:	c2 c0       	rjmp	.+388    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7ca0:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <USB_ControlRequest+0x4>
    7ca4:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ca6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7caa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7cae:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7cb2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7cb6:	97 7f       	andi	r25, 0xF7	; 247
    7cb8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7cbc:	85 fb       	bst	r24, 5
    7cbe:	88 27       	eor	r24, r24
    7cc0:	80 f9       	bld	r24, 0
    7cc2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				UEDATX = (Data >> 8);
    7cc6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    7cca:	85 c0       	rjmp	.+266    	; 0x7dd6 <USB_Device_ProcessControlRequest+0x184>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7ccc:	28 2f       	mov	r18, r24
    7cce:	2d 7f       	andi	r18, 0xFD	; 253
    7cd0:	09 f0       	breq	.+2      	; 0x7cd4 <USB_Device_ProcessControlRequest+0x82>
    7cd2:	a8 c0       	rjmp	.+336    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7cd4:	82 30       	cpi	r24, 0x02	; 2
    7cd6:	09 f0       	breq	.+2      	; 0x7cda <USB_Device_ProcessControlRequest+0x88>
    7cd8:	a5 c0       	rjmp	.+330    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7cda:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x2>
    7cde:	81 11       	cpse	r24, r1
    7ce0:	27 c0       	rjmp	.+78     	; 0x7d30 <USB_Device_ProcessControlRequest+0xde>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7ce2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <USB_ControlRequest+0x4>
    7ce6:	87 70       	andi	r24, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7ce8:	09 f4       	brne	.+2      	; 0x7cec <USB_Device_ProcessControlRequest+0x9a>
    7cea:	9c c0       	rjmp	.+312    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7cec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7cf0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7cf4:	20 ff       	sbrs	r18, 0
    7cf6:	1c c0       	rjmp	.+56     	; 0x7d30 <USB_Device_ProcessControlRequest+0xde>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7cf8:	93 30       	cpi	r25, 0x03	; 3
    7cfa:	21 f4       	brne	.+8      	; 0x7d04 <USB_Device_ProcessControlRequest+0xb2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7cfc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    7d00:	80 62       	ori	r24, 0x20	; 32
    7d02:	14 c0       	rjmp	.+40     	; 0x7d2c <USB_Device_ProcessControlRequest+0xda>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7d04:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    7d08:	90 61       	ori	r25, 0x10	; 16
    7d0a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7d0e:	21 e0       	ldi	r18, 0x01	; 1
    7d10:	30 e0       	ldi	r19, 0x00	; 0
    7d12:	a9 01       	movw	r20, r18
    7d14:	02 c0       	rjmp	.+4      	; 0x7d1a <USB_Device_ProcessControlRequest+0xc8>
    7d16:	44 0f       	add	r20, r20
    7d18:	55 1f       	adc	r21, r21
    7d1a:	8a 95       	dec	r24
    7d1c:	e2 f7       	brpl	.-8      	; 0x7d16 <USB_Device_ProcessControlRequest+0xc4>
    7d1e:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
				UERST = 0;
    7d22:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d26:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    7d2a:	88 60       	ori	r24, 0x08	; 8
    7d2c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d30:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7d38:	87 7f       	andi	r24, 0xF7	; 247
    7d3a:	50 c0       	rjmp	.+160    	; 0x7ddc <USB_Device_ProcessControlRequest+0x18a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d3c:	81 11       	cpse	r24, r1
    7d3e:	72 c0       	rjmp	.+228    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7d40:	10 91 c4 01 	lds	r17, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x2>
    7d44:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7d46:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7d48:	f8 94       	cli
    7d4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7d4e:	87 7f       	andi	r24, 0xF7	; 247
    7d50:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d54:	c7 dd       	rcall	.-1138   	; 0x78e4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	while (!(Endpoint_IsINReady()));
    7d5a:	80 ff       	sbrs	r24, 0
    7d5c:	fc cf       	rjmp	.-8      	; 0x7d56 <USB_Device_ProcessControlRequest+0x104>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7d5e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    7d62:	80 78       	andi	r24, 0x80	; 128
    7d64:	81 2b       	or	r24, r17

				UDADDR = Temp;
    7d66:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
				UDADDR = Temp | (1 << ADDEN);
    7d6a:	80 68       	ori	r24, 0x80	; 128
    7d6c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d70:	11 11       	cpse	r17, r1
    7d72:	02 c0       	rjmp	.+4      	; 0x7d78 <USB_Device_ProcessControlRequest+0x126>
    7d74:	82 e0       	ldi	r24, 0x02	; 2
    7d76:	01 c0       	rjmp	.+2      	; 0x7d7a <USB_Device_ProcessControlRequest+0x128>
    7d78:	83 e0       	ldi	r24, 0x03	; 3
    7d7a:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7d7c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    7d7e:	52 c0       	rjmp	.+164    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d80:	80 58       	subi	r24, 0x80	; 128
    7d82:	82 30       	cpi	r24, 0x02	; 2
    7d84:	08 f0       	brcs	.+2      	; 0x7d88 <USB_Device_ProcessControlRequest+0x136>
    7d86:	4e c0       	rjmp	.+156    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7d88:	ae 01       	movw	r20, r28
    7d8a:	4f 5f       	subi	r20, 0xFF	; 255
    7d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    7d8e:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <USB_ControlRequest+0x4>
    7d92:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x2>
    7d96:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <USB_ControlRequest+0x3>
    7d9a:	5f dd       	rcall	.-1346   	; 0x785a <CALLBACK_USB_GetDescriptor>
    7d9c:	bc 01       	movw	r22, r24
    7d9e:	89 2b       	or	r24, r25
    7da0:	09 f4       	brne	.+2      	; 0x7da4 <USB_Device_ProcessControlRequest+0x152>
    7da2:	40 c0       	rjmp	.+128    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7da4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7da8:	97 7f       	andi	r25, 0xF7	; 247
    7daa:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7dae:	89 81       	ldd	r24, Y+1	; 0x01
    7db0:	9a 81       	ldd	r25, Y+2	; 0x02
    7db2:	b9 de       	rcall	.-654    	; 0x7b26 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7db4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7db8:	8b 77       	andi	r24, 0x7B	; 123
    7dba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7dbe:	32 c0       	rjmp	.+100    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7dc0:	80 38       	cpi	r24, 0x80	; 128
    7dc2:	81 f5       	brne	.+96     	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7dc8:	87 7f       	andi	r24, 0xF7	; 247
    7dca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7dce:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7dd2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7dd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7dda:	8e 77       	andi	r24, 0x7E	; 126
    7ddc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7de0:	81 dd       	rcall	.-1278   	; 0x78e4 <Endpoint_ClearStatusStage>
    7de2:	20 c0       	rjmp	.+64     	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7de4:	81 11       	cpse	r24, r1
    7de6:	1e c0       	rjmp	.+60     	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7de8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x2>
    7dec:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <USB_ControlRequest+0x3>
    7df0:	99 27       	eor	r25, r25
    7df2:	02 97       	sbiw	r24, 0x02	; 2
    7df4:	bc f4       	brge	.+46     	; 0x7e24 <USB_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7df6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7dfa:	87 7f       	andi	r24, 0xF7	; 247
    7dfc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7e00:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <USB_ControlRequest+0x2>
    7e04:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    7e08:	6d dd       	rcall	.-1318   	; 0x78e4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    7e0a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <USB_Device_ConfigurationNumber>
    7e0e:	81 11       	cpse	r24, r1
    7e10:	06 c0       	rjmp	.+12     	; 0x7e1e <USB_Device_ProcessControlRequest+0x1cc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e12:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e16:	87 fd       	sbrc	r24, 7
    7e18:	02 c0       	rjmp	.+4      	; 0x7e1e <USB_Device_ProcessControlRequest+0x1cc>
    7e1a:	81 e0       	ldi	r24, 0x01	; 1
    7e1c:	01 c0       	rjmp	.+2      	; 0x7e20 <USB_Device_ProcessControlRequest+0x1ce>
    7e1e:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
    7e20:	8e bb       	out	0x1e, r24	; 30
    7e22:	3d da       	rcall	.-2950   	; 0x729e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e28:	83 ff       	sbrs	r24, 3
    7e2a:	0a c0       	rjmp	.+20     	; 0x7e40 <USB_Device_ProcessControlRequest+0x1ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7e2c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    7e30:	80 62       	ori	r24, 0x20	; 32
    7e32:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    7e3a:	87 7f       	andi	r24, 0xF7	; 247
    7e3c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    7e40:	0f 90       	pop	r0
    7e42:	0f 90       	pop	r0
    7e44:	df 91       	pop	r29
    7e46:	cf 91       	pop	r28
    7e48:	1f 91       	pop	r17
    7e4a:	0f 91       	pop	r16
    7e4c:	08 95       	ret

00007e4e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7e4e:	08 95       	ret

00007e50 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e50:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7e52:	8e b3       	in	r24, 0x1e	; 30
    7e54:	88 23       	and	r24, r24
    7e56:	59 f0       	breq	.+22     	; 0x7e6e <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7e58:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    7e5c:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e5e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7e66:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    7e68:	f4 de       	rcall	.-536    	; 0x7c52 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e6a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7e6e:	cf 91       	pop	r28
    7e70:	08 95       	ret

00007e72 <__tablejump2__>:
    7e72:	ee 0f       	add	r30, r30
    7e74:	ff 1f       	adc	r31, r31
    7e76:	05 90       	lpm	r0, Z+
    7e78:	f4 91       	lpm	r31, Z
    7e7a:	e0 2d       	mov	r30, r0
    7e7c:	09 94       	ijmp

00007e7e <eeprom_read_byte>:
    7e7e:	f9 99       	sbic	0x1f, 1	; 31
    7e80:	fe cf       	rjmp	.-4      	; 0x7e7e <eeprom_read_byte>
    7e82:	92 bd       	out	0x22, r25	; 34
    7e84:	81 bd       	out	0x21, r24	; 33
    7e86:	f8 9a       	sbi	0x1f, 0	; 31
    7e88:	99 27       	eor	r25, r25
    7e8a:	80 b5       	in	r24, 0x20	; 32
    7e8c:	08 95       	ret

00007e8e <eeprom_write_byte>:
    7e8e:	26 2f       	mov	r18, r22

00007e90 <eeprom_write_r18>:
    7e90:	f9 99       	sbic	0x1f, 1	; 31
    7e92:	fe cf       	rjmp	.-4      	; 0x7e90 <eeprom_write_r18>
    7e94:	1f ba       	out	0x1f, r1	; 31
    7e96:	92 bd       	out	0x22, r25	; 34
    7e98:	81 bd       	out	0x21, r24	; 33
    7e9a:	20 bd       	out	0x20, r18	; 32
    7e9c:	0f b6       	in	r0, 0x3f	; 63
    7e9e:	f8 94       	cli
    7ea0:	fa 9a       	sbi	0x1f, 2	; 31
    7ea2:	f9 9a       	sbi	0x1f, 1	; 31
    7ea4:	0f be       	out	0x3f, r0	; 63
    7ea6:	01 96       	adiw	r24, 0x01	; 1
    7ea8:	08 95       	ret

00007eaa <_exit>:
    7eaa:	f8 94       	cli

00007eac <__stop_program>:
    7eac:	ff cf       	rjmp	.-2      	; 0x7eac <__stop_program>
